# calls.http ‚Äî End-to-end & diagnostics for Event ‚Üí Post ‚Üí Telegram button
#
# Prereqs:
# 1) Server is running (default http://localhost:8081)
# 2) Telegram bot configured in application.yml (telegram.bot.username/token)
# 3) EITHER set telegram.bot.chat-id in config OR provide per-post telegramChatId below
# 4) Bot –º–∞—î –ø—Ä–∞–≤–∞ –ø–æ—Å—Ç–∏—Ç–∏/–∫–µ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ –∫–∞–Ω–∞–ª—ñ/–≥—Ä—É–ø—ñ
#
# Notes:
# - Run top‚Üídown. –õ–æ–≥—ñ–Ω–∏ –ø—Ä–æ–¥—É–±–ª—å–æ–≤–∞–Ω—ñ: —Å–ø–µ—Ä—à—É register, —è–∫—â–æ —é–∑–µ—Ä —ñ—Å–Ω—É—î ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∏–π login.
# - {{$isoTimestamp}} ‚Äî –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π ISO-—á–∞—Å VS Code REST Client.

@baseUrl = http://localhost:8081

@admin_username = admin2
@admin_password = adm1nPass!

@member_username = member1
@member_password = memb3rPass!

# –Ø–∫—â–æ –ù–ï –º–∞—î—à telegram.bot.chat-id —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ‚Äî –≤–∫–∞–∂–∏ —Ç—É—Ç ID –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏
@telegram_chat_id = -1003137847951

### 0) Health
GET {{baseUrl}}/actuator/health

### 1) Register ADMIN (auto-gets token)
POST {{baseUrl}}/api/v1/auth/register
Content-Type: application/json

{
  "username": "{{admin_username}}",
  "password": "{{admin_password}}",
  "role": "admin"
}
> {% client.global.set("admin_access_token", response.body.accessToken); %}

### 1.1) (If exists) Login ADMIN
# POST {{baseUrl}}/api/v1/auth/login
# Content-Type: application/json
#
# {
#   "username": "{{admin_username}}",
#   "password": "{{admin_password}}"
# }
# > {% client.global.set("admin_access_token", response.body.accessToken); %}

### 1.2) Who am I (ADMIN)
GET {{baseUrl}}/api/v1/auth/me
Authorization: Bearer {{admin_access_token}}

### 2) Create EVENT
POST {{baseUrl}}/api/v1/events
Authorization: Bearer {{admin_access_token}}
Content-Type: application/json

{
  "name": "Demo Open Training",
  "startAt": "{{$isoTimestamp}}",
  "endAt": null,
  "location": "Main Hall",
  "capacity": 30,
  "description": "Intro training session (calls.http)",
  "coverUrl": null,
  "category": "SPORTS",
  "tags": ["demo","training"]
}
> {% client.global.set("event_id", response.body.id); %}

### 2.1) Get EVENT
GET {{baseUrl}}/api/v1/events/{{event_id}}
Authorization: Bearer {{admin_access_token}}

### 3) Create PUBLIC TELEGRAM POST (Scheduled, per-post chatId)
POST {{baseUrl}}/api/v1/events/{{event_id}}/posts
Authorization: Bearer {{admin_access_token}}
Content-Type: application/json

{
  "title": "Open training today üí™",
  "body": "–ù–∞—Ç–∏—Å–Ω–∏ ¬´–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å¬ª –ø—ñ–¥ —Ü–∏–º –ø–æ—Å—Ç–æ–º.",
  "publishAt": "{{$isoTimestamp}}",
  "audience": "PUBLIC",
  "channel": "TELEGRAM",
  "status": "SCHEDULED",
  "telegramChatId": "{{telegram_chat_id}}"
}
> {% client.global.set("post_id", response.body.id); %}

### 3.1) List POSTS (no filters)
GET {{baseUrl}}/api/v1/events/{{event_id}}/posts
Authorization: Bearer {{admin_access_token}}

### 3.2) List POSTS (filters: status=SCHEDULED, channel=TELEGRAM)
GET {{baseUrl}}/api/v1/events/{{event_id}}/posts?status=SCHEDULED&channel=TELEGRAM
Authorization: Bearer {{admin_access_token}}

### 3.3) Publish NOW (expect status -> PUBLISHED)
POST {{baseUrl}}/api/v1/events/{{event_id}}/posts/{{post_id}}/publish-now
Authorization: Bearer {{admin_access_token}}

### 3.4) Verify POST became PUBLISHED
GET {{baseUrl}}/api/v1/events/{{event_id}}/posts/{{post_id}}
Authorization: Bearer {{admin_access_token}}

### 3.5) (Optional) Create SCHEDULED POST to test /_dispatch-tick
POST {{baseUrl}}/api/v1/events/{{event_id}}/posts
Authorization: Bearer {{admin_access_token}}
Content-Type: application/json

{
  "title": "Scheduled dispatch tick test",
  "body": "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç –∑ –∫–Ω–æ–ø–∫–æ—é.",
  "publishAt": "{{$isoTimestamp}}",
  "audience": "PUBLIC",
  "channel": "TELEGRAM",
  "status": "SCHEDULED",
  "telegramChatId": "{{telegram_chat_id}}"
}
> {% client.global.set("post_id_scheduled", response.body.id); %}

### 3.6) Manual dispatch tick (publishes due SCHEDULED posts)
POST {{baseUrl}}/api/v1/events/{{event_id}}/posts/_dispatch-tick
Authorization: Bearer {{admin_access_token}}

### 3.7) Verify scheduled POST status
GET {{baseUrl}}/api/v1/events/{{event_id}}/posts/{{post_id_scheduled}}
Authorization: Bearer {{admin_access_token}}

### 3.8) (Optional) Negative: PUBLIC post WITHOUT chatId (should fail if no telegram.bot.chat-id in config)
# POST {{baseUrl}}/api/v1/events/{{event_id}}/posts
# Authorization: Bearer {{admin_access_token}}
# Content-Type: application/json
#
# {
#   "title": "No default chat test",
#   "body": "–ë–µ–∑ telegramChatId —Ç–∞ –±–µ–∑ telegram.bot.chat-id —É –∫–æ–Ω—Ñ—ñ–≥—É –º–∞—î –≤–ø–∞—Å—Ç–∏.",
#   "publishAt": "{{$isoTimestamp}}",
#   "audience": "PUBLIC",
#   "channel": "TELEGRAM",
#   "status": "SCHEDULED"
# }
# > {% client.global.set("post_id_nochat", response.body.id); %}

### 4) Register MEMBER (attendee)
POST {{baseUrl}}/api/v1/auth/register
Content-Type: application/json

{
  "username": "{{member_username}}",
  "password": "{{member_password}}",
  "role": "user"
}
> {% client.global.set("member_access_token", response.body.accessToken); %}

### 4.1) (If exists) Login MEMBER
# POST {{baseUrl}}/api/v1/auth/login
# Content-Type: application/json
#
# {
#   "username": "{{member_username}}",
#   "password": "{{member_password}}"
# }
# > {% client.global.set("member_access_token", response.body.accessToken); %}

### 4.2) Get Telegram deep-link for MEMBER
GET {{baseUrl}}/api/v1/telegram/link-url
Authorization: Bearer {{member_access_token}}

### ‚Äî‚Äî‚Äî Manual step in Telegram ‚Äî‚Äî‚Äî
# Open the URL above in Telegram -> press **Start** to link.
# In your channel/group, open the published message and press **‚Äú–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å‚Äù**.
# Expect a success toast. For unsubscribe, press **‚Äú–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é‚Äù**.

### 5) Verify REGISTRATIONS (ADMIN)
GET {{baseUrl}}/api/v1/registrations/event-id/{{event_id}}
Authorization: Bearer {{admin_access_token}}

### 5.1) Verify EVENT counters (if your API returns them)
GET {{baseUrl}}/api/v1/events/{{event_id}}
Authorization: Bearer {{admin_access_token}}

### 6) (Optional) Cancel registration via REST (equivalent of the Telegram ‚Äú–°–∫–∞—Å—É–≤–∞—Ç–∏‚Äù)
DELETE {{baseUrl}}/api/v1/registrations/my/{{event_id}}
Authorization: Bearer {{member_access_token}}

### 6.1) Check registrations again
GET {{baseUrl}}/api/v1/registrations/event-id/{{event_id}}
Authorization: Bearer {{admin_access_token}}

### 7) (Optional) SUBSCRIBERS-post flow
# –¶–µ–π —Ä–æ–∑–¥—ñ–ª –º–∞—î —Å–µ–Ω—Å, —è–∫—â–æ —É –≤–∞—Å —î –º–µ—Ö–∞–Ω—ñ–∑–º –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ —ñ–≤–µ–Ω—Ç (EventSubscription)
# —ñ –≤–∂–µ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω–∏–π –ø—ñ–¥–ø–∏—Å–Ω–∏–∫ —É –ë–î (es.active=true) –∑ Messenger=TELEGRAM.
# –Ü–Ω–∞–∫—à–µ —Ä–æ–∑—Å–∏–ª–∫–∞ ‚Äúaudience=SUBSCRIBERS‚Äù –Ω—ñ–∫–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ.
#
# 7.1) Create SUBSCRIBERS post
# POST {{baseUrl}}/api/v1/events/{{event_id}}/posts
# Authorization: Bearer {{admin_access_token}}
# Content-Type: application/json
#
# {
#   "title": "–î–ª—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ üéØ",
#   "body": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º –ø–æ–¥—ñ—ó.",
#   "publishAt": "{{$isoTimestamp}}",
#   "audience": "SUBSCRIBERS",
#   "channel": "TELEGRAM",
#   "status": "SCHEDULED"
# }
# > {% client.global.set("post_id_subs", response.body.id); %}
#
# 7.2) Dispatch tick (–Ω–∞–¥—Å–∏–ª–∞—î SUBSCRIBERS)
# POST {{baseUrl}}/api/v1/events/{{event_id}}/posts/_dispatch-tick
# Authorization: Bearer {{admin_access_token}}
#
# 7.3) Verify post status
# GET {{baseUrl}}/api/v1/events/{{event_id}}/posts/{{post_id_subs}}
# Authorization: Bearer {{admin_access_token}}

### 8) Cleanup (optional)
# DELETE post(s)
# DELETE {{baseUrl}}/api/v1/events/{{event_id}}/posts/{{post_id}}
# Authorization: Bearer {{admin_access_token}}
#
# DELETE {{baseUrl}}/api/v1/events/{{event_id}}/posts/{{post_id_scheduled}}
# Authorization: Bearer {{admin_access_token}}
#
# DELETE EVENT
# DELETE {{baseUrl}}/api/v1/events/{{event_id}}
# Authorization: Bearer {{admin_access_token}}
